
–--------

[[1, 2], [3, 4]].map do |arr|
  puts arr.first
  arr.first
end

# output 
# 1
# 3
# => [1, 3]

LINE    ACTION          OBJECT          SIDE EFFECT     RETURN VALUE        RET VAL USED?
1       method call     outer array     none            [1, 3] (new ary)    no
        (map)

1-4     block exec      each sub-array  none            e at idx 0 of       yes, by map for transformation
                                                        sub array

2       method call     each sub-array  none            e at idx 0 of       yes, by puts  
        (first)                                         sub array

2       method call     e at idx 0      output str rep  nil                 no
        (puts)          of sub-array    of integer

2       method call     each sub-array  none            e at idx 0 of       yes, by map (used for
        (first)                                         sub array           blk ret val)


Example 4 
–--------

my_arr = [[18, 7], [3, 12]].each do |arr|
  arr.each do |num|
    if num > 5
      puts num
    end
  end
end

output:
#  18
#  7
# => [18, 7]
#  12
# => [3, 12]
# => [[18, 7], [3, 12]]

LINE    ACTION          OBJECT          SIDE EFFECT     RETURN VALUE        RET VAL USED?
1       variable        n/a             none            [[18, 7], [3, 12]]  no
        assignment

1       method call     outer array     none            the calling object  yes, referenced by my_arr 
        (each)

1-7     outer block     each sub-array  none            each sub-array      no 
        exec

2       method call     each            none            calling object      yes, to determine return value 
        (each)          sub-array                                           of outer block 

2-6     inner block     each int in     none            nil                 no
        exec            sub-array

3       comparison (>)  e of sub-array  none            boolean             yes, evaluated by if
                        in iteration
3       if conditional  e of sub-array  none            nil                 yes, to determine inner block ret val 
                        in iteration

4       method call     num             outputs str     nil                 yes, used to determine return val of
        (puts)                          rep of num                          inner block


Example 5

[[1, 2], [3, 4]].map do |arr|
  arr.map do |num|
    num * 2
  end
end

output:
# => [[2, 4], [6, 8]]

LINE    ACTION          OBJECT          SIDE EFFECT     RETURN VALUE            RET VAL USED?
1       map meth call   outer array     none            [[2, 4], [6, 8]]             no
1-4     otr blk exec    ea sub-array    none                                    to determine otr map ret val
2       map meth call   ea sub-array    none            [2, 4] then [6, 8]      yes, for otr map ret val
3       multiplication  

Example 6

[{ a: 'ant', b: 'elephant' }, { c: 'cat' }].select do |hash|
  hash.all? do |key, value|
    value[0] == key.to_s
  end
end

# => [{ c: 'cat' }]

Example 9

[[[1], [2], [3], [4]], [['a'], ['b'], ['c']]].map do |element1|
  element1.each do |element2|
    element2.partition do |element3|
      element3.size > 0
    end
  end
end

# Returns original object

Example 10

Let's say we have the following data structure of nested arrays and we want to increment every number by 1 without changing the data structure.

[[[1, 2], [3, 4]], [5, 6]].map do |arr|
  arr.map do |el|
    if el.to_s.size == 1    # it's an integer
      el + 1
    else                    # it's an array
      el.map do |n|
        n + 1
      end
    end
  end
end

# => [[[2, 3], [4, 5]], [6, 7]]
